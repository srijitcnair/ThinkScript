declare lower;
## RSI
def rsi = RSI();
def rsiSignal = if rsi > rsi[1] then 1 else -1;
##ADX
def hiDiff = high - high[1];
def loDiff = low[1] - low;

def plusDM = if hiDiff > loDiff and hiDiff > 0 then hiDiff else 0;
def minusDM =  if loDiff > hiDiff and loDiff > 0 then loDiff else 0;

def ATR = MovingAverage(AverageType.WILDERS, TrueRange(high, close, low), 14);
def diPlus = 100 * MovingAverage(AverageType.WILDERS, plusDM, 14) / ATR;
def diMinus = 100 * MovingAverage(AverageType.WILDERS, minusDM, 14) / ATR;

def dx = if (diPlus + diMinus > 0) then 100 * AbsValue(diPlus - diMinus) / (diPlus + diMinus) else 0;
def adxVal = MovingAverage(AverageType.WILDERS, dx, 14);
#def adxSignal = if diPlus crosses above diMinus then 1 else if diMinus crosses above diPlus then -1 else 0;
def adxSignal = if diPlus> diMinus and adxVal>30 then 1 else -1;

## MFI
def mfiVal = Average(moneyflow(high, close, low, volume, 14), 1);
def mfiSignal = if mfiVal > mfiVal[1] then 1 else -1;

## Ultimate Oscillator
def fastLength = 7;
def medLength = 14;
def slowLength = 28;

def trRng = TrueRange(high, close, low);

def trRngFast = sum(trRng, fastLength);
def trRngMed = sum(trRng, medLength);
def trRngSlow = sum(trRng, slowLength);

def diff = close - Min(close[1], low);

def diffFast = sum(diff, fastLength);
def diffMed = sum(diff, medLength);
def diffSlow = sum(diff, slowLength);

def factorFast = slowLength / fastLength;
def factorMed = slowLength / medLength;

def valFast = (diffFast / trRngFast) * factorFast;
def valMed = (diffMed / trRngMed) * factorMed;
def valSlow = (diffSlow / trRngSlow);

def ultOsc = if trRngFast == 0 or trRngMed == 0 or trRngSlow == 0 then 0 
else (valFast + valMed + valSlow) / (factorFast + factorMed + 1);

def ultOscSignal = if ultOsc > ultOsc[1] then 1 else -1;



plot finalSignal = if rsiSignal ==1 and mfiSignal ==1 and adxSignal ==1 and ultOscSignal ==1 then 1
else if rsiSignal ==-1 and mfiSignal ==-1 and adxSignal ==-1 and ultOscSignal ==-1 then -1
else 0;



